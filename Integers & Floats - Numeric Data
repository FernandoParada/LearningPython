# ~Arithmetic Operators~                         # ~Comparisons~
# Addition:       3 + 2                          # Equal:               3 == 2
# Subtraction:    3 - 2                          # Not Equal:           3 != 2
# Multiplication: 3 * 2                          # Greater Than:        3 > 2
# Division:       3 / 2                          # Less Than:           3 < 2
# Floor Division: 3 // 2                         # Greater or Equal:    3 >= 2
# Exponent:       3 ** 2                         # Less or Equal:       3 <= 2
# Modulus:        3 % 2


Notes:
- Can use () within a math problem in order to modify order of operations
- Set variable value same as with words: num = 3 / same as message = hello
	- Python recognizes textual data vs. numeric data
- Can set operator before = sign i.e. num += to shorthand an operation on it
	- num = 1
	- num += 499
	- print(num)
		- 500
- Comparisons return BOOLEANS
- Single "=" is a signifier for assigning a value (it is an "assignment") / Double "==" is a "comparison" and is a... function?
------------------------------------------------------------------------------------------------------------------------------------------------
Notes (Casting):
- If you have a string that is an integer value and you want to treat it as a number value rather than as a text string, you must cast
		- "If you have an integer that is actually a string and you want to cast that to an integer, then you can wrap that string in this int function or int class to create an integer" - Corey Schafer, Youtube 2017
	- What is being done below is that the num_# strings are being told to act as integers rather than pure text, allowing me to use arithmetic & related operators on them to output the accompanying value
------------------------------------------------------------------------------------------------------------------------------------------------
- Ex:
Casting Practice #1:
- num_1 = '100'
- num_2 = '200'
- 
- num_1 = int(num_1)
- num_2 = int(num_2)
	- print(num_1 + num_2)
		- 300
---
Round Practice #1:
- Can use round function to round to nearest whole value OR add comma, # to round to a specific decimal value:
	- print(round(3.75))
		- 4
- Nearest 1 decimal
	- print(round(3.75, 1)) 
		- 3.8
- Nearest 3 decimal
	- print(round(3.7589754, 3)
		- 3.758
---
Comparisons Practice #1:
- num_1 = 3
- num_2 = 2
	- print(num_1 == num_2)
		- False

- num_1 = 3
- num_2 = 2
	- print(num_1 >= num_2)
		- True

- num_1 = 3
- num_2 = 2
	- print(num_1 = num_2)
		- ~INVALID~
